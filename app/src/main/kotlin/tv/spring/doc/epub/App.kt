/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tv.spring.doc.epub

import io.github.oshai.kotlinlogging.KotlinLogging
import tv.spring.doc.epub.common.parser.NavTreeParser
import tv.spring.doc.epub.common.service.BookGeneratorService
import tv.spring.doc.epub.common.writer.EpubBookWriter
import tv.spring.doc.epub.model.Book
import tv.spring.doc.epub.service.DocumentationRetrievalService
import tv.spring.doc.epub.service.DownloadService
import java.io.IOException
import java.net.URI
import java.net.URISyntaxException
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import kotlin.system.exitProcess

private val log = KotlinLogging.logger {}

fun main(args: Array<String>) {
    log.info { "Argument count: ${args.size}"}

    val options = AppOptions()
    if (!Files.exists(Path.of(options.outputDir))) {
        try {
            Files.createDirectories(Path.of(options.outputDir))
        } catch (e: IOException) {
            throw RuntimeException(e)
        }
    }
    val baseUrl = getProjectUrl(options.project, options.springVersion)
    val bookGeneratorService = BookGeneratorService(NavTreeParser(DocumentationRetrievalService(DownloadService())), DocumentationRetrievalService(DownloadService()))
    try {
        val optBook = bookGeneratorService.create(URI(baseUrl), options.outputDir, true)
        if (optBook.isFailure) {
            log.error { "Unable to create book from documentation." }
            exitProcess(1)
        }
        val book: Book = optBook.getOrThrow()
        val writer = EpubBookWriter()
        val outputPath = Paths.get(
            options.outputDir,
            (options.project + "-" + options.springVersion) + ".epub"
        )
        writer.write(outputPath, book)
    } catch (e: URISyntaxException) {
        log.error { e }
        System.exit(1)
    } catch (e: IOException) {
        log.error { e }
        System.exit(1)
    }
}

fun getProjectUrl(projectName: String, version: String): String {
    return if (version == "latest") {
        String.format("https://docs.spring.io/%s/reference/", projectName)
    } else {
        String.format("https://docs.spring.io/%s/reference/%s", projectName, version)
    }
}
